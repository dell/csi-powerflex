// Copyright Â© 2019-2022 Dell Inc. or its subsidiaries. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//      http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package service_test

import (
	"context"
	"testing"

	csi "github.com/container-storage-interface/spec/lib/go/csi/v0"
	"github.com/stretchr/testify/assert"
)

func TestControllerGetCaps(t *testing.T) {

	ctx := context.Background()

	gclient, stop := startServer(ctx, t)
	defer stop()

	client := csi.NewControllerClient(gclient)

	rpcs := map[csi.ControllerServiceCapability_RPC_Type]struct{}{
		csi.ControllerServiceCapability_RPC_CREATE_DELETE_VOLUME:     struct{}{},
		csi.ControllerServiceCapability_RPC_PUBLISH_UNPUBLISH_VOLUME: struct{}{},
		csi.ControllerServiceCapability_RPC_LIST_VOLUMES:             struct{}{},
		csi.ControllerServiceCapability_RPC_GET_CAPACITY:             struct{}{},
	}

	resp, err := client.ControllerGetCapabilities(ctx,
		&csi.ControllerGetCapabilitiesRequest{})

	assert.NoError(t, err)
	caps := resp.GetCapabilities()
	assert.NotEmpty(t, caps)
	assert.Len(t, caps, len(rpcs))

	for _, cap := range caps {
		assert.Contains(t, rpcs, cap.GetRpc().GetType())
		delete(rpcs, cap.GetRpc().GetType())
	}
	assert.Empty(t, rpcs)
}

/*
func TestControllerProbe(t *testing.T) {
	ctx := context.Background()

	os.Setenv("X_CSI_VXFLEXOS_ENDPOINT", "https://localhost:443")

	gclient, stop := startServer(ctx, t)
	defer stop()

	client := csi.NewControllerClient(gclient)
}
*/

func startServer(ctx context.Context, t *testing.T) (*grpc.ClientConn, func()) {

	// Create a new SP instance and serve it with a piped connection.
	sp := provider.New()
	lis, err := memconn.Listen("csi-test")
	assert.NoError(t, err)
	go func() {
		if err := sp.Serve(ctx, lis); err != nil {
			assert.EqualError(t, err, "http: Server closed")
		}
	}()

	clientOpts := []grpc.DialOption{
		grpc.WithInsecure(),
		grpc.WithDialer(func(string, time.Duration) (net.Conn, error) {
			return memconn.Dial("csi-test")
		}),
	}

	// Create a client for the piped connection.
	client, err := grpc.DialContext(ctx, "", clientOpts...)
	assert.NoError(t, err)

	return client, func() {
		client.Close()
		sp.GracefulStop(ctx)
	}
}
