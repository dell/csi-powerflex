apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-controller
  namespace: {{ .Release.Namespace }}
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}-controller
rules:
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "watch", "list", "delete", "update", "create"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
{{ if .Values.podmon.enabled }}
    verbs: ["get", "list", "watch", "patch"]
{{ else }}
    verbs: ["get", "list", "watch"]
{{ end }}
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
{{ if .Values.podmon.enabled }}
    verbs: ["get", "list", "watch", "update", "patch", "delete"]
{{ else }}
    verbs: ["get", "list", "watch", "update", "patch"]
{{ end }}
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments/status"]
    verbs: ["patch"]
  - apiGroups: ["csi.storage.k8s.io"]
    resources: ["csinodeinfos"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods"]
{{ if .Values.podmon.enabled }}
    verbs: ["get", "list", "watch", "update", "delete"]
{{ else }}
    verbs: ["get", "list", "watch"]
{{ end }}
# below for snapshotter
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots/status","volumesnapshotcontents/status"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "list", "watch", "delete", "update"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}-controller
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-controller
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: {{ .Release.Name }}-controller
  apiGroup: rbac.authorization.k8s.io
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}-controller
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      name: {{ .Release.Name }}-controller
  replicas: {{ required "Must provide the number of controller instances to create." .Values.controllerCount }}
  template:
    metadata:
      labels:
        name: {{ .Release.Name }}-controller
    spec:
      affinity:
        nodeSelector:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values:
                - {{ .Release.Name }}-controller
            topologyKey: kubernetes.io/hostname        
      serviceAccountName: {{ .Release.Name }}-controller
      {{ if .Values.controller.nodeSelector }}
      nodeSelector:
      {{- toYaml .Values.controller.nodeSelector | nindent 8 }}
      {{ end }}
      {{ if .Values.controller.tolerations }}
      tolerations: 
      {{- toYaml .Values.controller.tolerations | nindent 6 }}
      {{ end }}
      containers:
{{ if .Values.podmon.enabled }}
        - name: podmon
          imagePullPolicy: Always
          image: {{ required "Must provide the podmon container image." .Values.podmon.image }}
          args:
            {{- toYaml .Values.podmon.controller.args | nindent 12 }}
          env:
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: socket-dir
              mountPath: /var/run/csi
{{ end }}
        - name: attacher
          image: {{ required "Must provide the CSI attacher container image." .Values.images.attacher }}
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v=5"
            - "--leader-election=true"
          env:
            - name: ADDRESS
              value: /var/run/csi/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/run/csi
        - name: provisioner
          image: {{ required "Must provide the CSI provisioner container image." .Values.images.provisioner }}
          args:
            - "--csi-address=$(ADDRESS)"
            - "--feature-gates=Topology=true"
            - "--volume-name-prefix={{ required "Must provide a value to prefix to driver created volume names" .Values.volumeNamePrefix }}"
            - "--volume-name-uuid-length=10"
            - "--leader-election=true"
            - "--timeout=120s"
            - "--v=5"
            - "--default-fstype={{ .Values.defaultFsType | default "ext4" }}"
            - "--extra-create-metadata"
          env:
            - name: ADDRESS
              value: /var/run/csi/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/run/csi
        - name: snapshotter
          image: {{ required "Must provide the CSI snapshotter container image." .Values.images.snapshotter }}
          args:
            - "--csi-address=$(ADDRESS)"
            - "--timeout=120s"
            - "--v=5"
            - "--leader-election=true"
          env:
            - name: ADDRESS
              value: /var/run/csi/csi.sock
          imagePullPolicy: Always
          volumeMounts:
            - name: socket-dir
              mountPath: /var/run/csi
        - name: resizer
          image: {{ required "Must provide the CSI resizer container image." .Values.images.resizer }}
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v=5"
            - "--leader-election=true"
          env:
            - name: ADDRESS
              value: /var/run/csi/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/run/csi
        - name: driver
          image: {{ required "Must provide the VxFlex OS driver container image." .Values.images.driver }}
          imagePullPolicy: Always
          command: [ "/csi-vxflexos.sh" ]
          args:
            - "--leader-election"
            - "--array-config=/vxflexos-config/config"
          env:
            - name: CSI_ENDPOINT
              value: /var/run/csi/csi.sock
            - name: X_CSI_MODE
              value: controller
            - name: X_CSI_DEBUG
              value: "true"
            - name: X_CSI_VXFLEXOS_ENABLESNAPSHOTCGDELETE
              value: "{{ required "Enable this to allow deletion of all snaps in CG" .Values.enablesnapshotcgdelete }}"
            - name: X_CSI_VXFLEXOS_ENABLELISTVOLUMESNAPSHOT
              value: "{{ required "Enable this to have CSI ListVolumes include snapshots" .Values.enablelistvolumesnapshot }}"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/run/csi
            - name: vxflexos-config
              mountPath: /vxflexos-config
      volumes:
        - name: socket-dir
          emptyDir:
        - name: vxflexos-config
          secret:
            secretName: {{ .Release.Name }}-config
